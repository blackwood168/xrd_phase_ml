name: Monitor Changes, Lint, Tests and Send Notifications

on:
  push:
    branches: [ main, dev ] 
  workflow_dispatch:

jobs:
  lint_tests_and_notify:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Get Commit Details
      id: commit_details
      run: |
        # Escape special characters in commit message
        message=$(git log -1 --pretty=%B | sed 's/"/\\"/g')
        author=$(git log -1 --pretty=%an | sed 's/"/\\"/g')
        echo "message=$message" >> $GITHUB_OUTPUT 
        echo "author=$author" >> $GITHUB_OUTPUT

    - name: Check for changes
      id: check_changes
      run: |
        rm -f changes.txt
        # Fetch both branches
        git fetch origin main dev || true
            
        # Check if dev branch exists
        if git rev-parse --verify origin/dev >/dev/null 2>&1; then
            # Compare changes between dev and main branches
            git diff --name-only origin/main origin/dev > changes.txt
            changes=$(cat changes.txt | tr '\n' ', ' | sed 's/,$//')
        else
            changes="No dev branch"
        fi
        echo "files_changed=$changes" >> $GITHUB_OUTPUT

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest torch torchvision

    - name: Run flake8
      id: flake8
      run: |
        # Check if files exist before running flake8
        files_to_lint=(
          "scripts/auto_commit.py"
          "pl_models.py"
          "test.py"
          "train.py"
          "models/unet_fft.py"
          "xrd_transformer.py"
          "model.py"
        )
        existing_files=()
        for file in "${files_to_lint[@]}"; do
          if [ -f "$file" ]; then
            existing_files+=("$file")
          fi
        done
        
        if [ ${#existing_files[@]} -eq 0 ]; then
          echo "lint_results=No Python files found to lint" >> $GITHUB_OUTPUT
        else
          # Only check for bugs (E9**, F***) and ignore style issues
          flake8_output=$(flake8 --select=E9,F "${existing_files[@]}" || true)
          echo "$flake8_output" > flake8_output.txt
          lint_results=$(head -n 5 flake8_output.txt | sed ':a;N;$!ba;s/\n/%0A/g' | sed 's/"/\\"/g')
          echo "lint_results=$lint_results" >> $GITHUB_OUTPUT
        fi

    - name: Run basic tests
      id: basic_tests
      run: |
        test_output=$(python github_tests.py)
        echo "test_results<<EOF" >> $GITHUB_OUTPUT
        echo "$test_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Send Telegram Notification
      if: always()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
            üîÑ –ù–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã! üéâ
            
            üìù –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: ${{ steps.commit_details.outputs.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è' }}
            üë§ –ê–≤—Ç–æ—Ä: ${{ steps.commit_details.outputs.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä' }}
            
            üìÇ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
            ${{ steps.check_changes.outputs.files_changed || '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤' }}
            
            üìö –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}
            üîó –°—Å—ã–ª–∫–∞: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
            
            ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–∏–Ω—Ç–∏–Ω–≥–∞:
            ${{ steps.flake8.outputs.lint_results || '–ù–µ—Ç –∑–∞–º–µ—á–∞–Ω–∏–π –ª–∏–Ω—Ç–µ—Ä–∞' }} ‚ú®
            
            üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:
            ${{ steps.basic_tests.outputs.test_results || '–¢–µ—Å—Ç—ã –Ω–µ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã' }} üöÄ